@page "/Cliente/Edit/{ClienteId:int}"
@inject ClientesServices clienteService
@inject NavigationManager navigationManager
@inject ToastService toastService
@rendermode InteractiveServer

<EditForm Model="clientes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card-header bg-primary text-center text-white py-2 rounded">
        <h3 style="font-weight: bold;" class="font-weight-bold">Modificar Cliente</h3>
    </div>

    <div class="card-body">
        <!-- ClienteId -->
        <div class="mb-3">
            <label for="ClienteId" class="form-label">ClienteId:</label>
            <InputNumber @bind-Value="clientes.ClienteId" class="form-control" Disabled />
        </div>

        <!-- Nombres -->
        <div class="mb-3">
            <label for="Nombres" class="form-label">Nombres:</label>
            <InputText @bind-Value="clientes.Nombres" class="form-control" />
        </div>

       
    </div>

    <div class="card-footer d-flex justify-content-lg-center text-center">
        <div class="btn-group">
            <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo">
                <span class="bi bi-plus"></span> Nuevo
            </button>
            <button type="submit" class="btn btn-outline-success ml-2">
                <span class="bi bi-check-circle-fill"></span> Guardar
            </button>
            <button type="button" class="btn btn-outline-danger ml-2" @onclick="Retroceder">
                <span class="bi bi-arrow-bar-left"></span> Retroceder
            </button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int ClienteId { get; set; }
    public Models.Clientes clientes { get; set; } = new Models.Clientes();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        clientes = await clienteService.Buscar(ClienteId) ?? new Models.Clientes();
    }

    public async Task<bool> Validar()
    {
        var existeCliente = await clienteService.Listar(c =>
            c.Nombres.ToLower() == clientes.Nombres.ToLower() &&
            c.ClienteId != clientes.ClienteId);

        return !existeCliente.Any();
    }

    public void Nuevo()
    {
        clientes = new Models.Clientes();
        Existe = false;
    }

    public async Task Guardar()
    {
        if (!await Validar())
        {
           
            return;
        }

        
        
        
    }

    public void Retroceder()
    {
        navigationManager.NavigateTo("/Cliente/Index");
    }
}
